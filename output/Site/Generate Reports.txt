Sure! Here's an example of a Python function that generates reports from the scraped order data:
```python
import pandas as pd
from datetime import datetime

def generate_report(order_data):
    # Convert the order data to a Pandas DataFrame
    df = pd.DataFrame(order_data)

    # Calculate summary statistics for each column
    summary_stats = df.describe()

    # Calculate the total revenue for each customer
    total_revenue = df.groupby('customer')['quantity'].transform('*', axis=0)

    # Create a new DataFrame with all the calculated metrics
    report_df = pd.concat([df, summary_stats, total_revenue]], axis=1)

    # Rename the columns to be more meaningful and concise
    report_df.columns = ['order_id', 'customer', 'product', 'quantity', 'price', 'total_price', 'summary_statistics', 'total_revenue']

    # Add a column with the date of each order
    report_df['date'] = [datetime.fromtimestamp(x/1000).strftime('%Y-%m-%d') for x in report_df['order_id']]]

    return report_df
```
This function takes in a list of dictionaries, where each dictionary represents an order with keys like 'customer', 'product', 'quantity', and 'price'. The function then converts the order data to a Pandas DataFrame, calculates summary statistics for each column, and calculates the total revenue for each customer. Finally, the function creates a new DataFrame with all the calculated metrics, renames the columns to be more meaningful and concise, and adds a column with the date of each order. The resulting DataFrame is then returned by the function.