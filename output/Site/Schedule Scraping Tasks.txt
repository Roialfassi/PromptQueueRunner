To solve this problem, we can use Python's built-in libraries `schedule` and `time`. The `schedule` library helps us in scheduling our tasks according to given intervals.

Here is a simple implementation of the function that schedules the scraping task to run at regular intervals:

```python
import schedule
import time

def scheduled_scraping():
    # Add your scraping code here

    print("Scraping has been completed.")

# Schedule the scraping task to run every 5 minutes
schedule.every(5).minutes.do(scheduled_scraping)

while True:
    # Check whether a scheduled task is pending to be executed
    schedule.run_pending()

    # Sleep for one second before checking again
    time.sleep(1)
```

In the above code, we define a function `scheduled_scraping()` that contains our scraping code. We then use the `schedule.every(5).minutes.do(scheduled_scraping)` statement to schedule our scraping task to run every 5 minutes.

Finally, we use an infinite loop (`while True`) to continuously check whether a scheduled task is pending to be executed. If a scheduled task is pending, we execute it by calling `schedule.run_pending()`. We then sleep for one second before checking again using `time.sleep(1)`. This ensures that our scraping task runs at regular intervals, as specified in the problem statement.