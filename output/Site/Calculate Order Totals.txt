Sure, I can help you create a Python function that calculates totals from scraped data. 

Here's an example of how the function could look like:
```python
def calculate_totals(scraped_data):
    """Calculates totals such as the total number of orders or the total sales value, from the scraped data.
    
    Args:
        scraped_data (dict): A dictionary containing the scraped data.
    
    Returns:
        dict: A dictionary containing the calculated totals.
    """

    # Initialize empty dictionaries to store totals for each category and global totals
    category_totals = {}
    global_totals = {
        "total_orders": 0,
        "total_sales_value": 0
    }

    # Iterate over the scraped data to calculate totals
    for item in scraped_data:
        category = item["category"]
        order_number = item["order_number"]
        sales_amount = item["sales_amount"]
        
        # Update global totals
        global_totals["total_orders"] += 1
        global_totals["total_sales_value"] += sales_amount

        # Update category totals if category exists, otherwise create a new entry
        if category in category_totals:
            category_totals[category]["total_sales_value"]] += sales_amount
            category_totals[category]["total_orders"]] += 1
        else:
            category_totals[category] = {
                "total_sales_value": 0,
                "total_orders": 0
            }
            
            # Update category totals for the new category
            category_totals[category]["total_sales_value"]] += sales_amount
            category_totals[category]["total_orders"]] += 1

    # Return a dictionary containing the calculated totals
    return {
        **global_totals,
        **category_totals
    }
```
This function takes in a scraped data dictionary and returns a new dictionary that contains the calculated totals. The function first initializes empty dictionaries to store totals for each category and global totals. Then, the function iterates over the scraped data and updates the corresponding totals for each category and global totals. Finally, the function returns a new dictionary containing the calculated totals, including both global totals and category-specific totals.