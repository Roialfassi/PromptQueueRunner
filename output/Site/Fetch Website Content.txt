To achieve this, we can use the `requests` library in Python. Here's an example implementation of a function that sends a GET request to a website and returns the HTML content:

```python
import requests

def send_get_request(url):
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise exception if status code is not successful (200-299))

        return response.text

    except requests.exceptions.RequestException as e:
        print("Error occurred while sending the GET request:", str(e))
        return None
```

In this implementation, we first import the `requests` library. Then, we define a function named `send_get_request` that takes a URL as an argument.

Inside the function, we use a try-except block to handle any exceptions that may occur while sending the GET request.

Within the try block, we send the GET request using the `requests.get()` method and passing in the URL. We then check if the response status code is successful (200-299) using the `raise_for_status()` method. If the status code is not successful, an exception will be raised.

If the response status code is successful, we return the HTML content of the response by accessing the `text` attribute of the response object.

In case any error occurs while sending the GET request or if the response status code is not successful, we catch the exceptions in the except block and print an error message along with the exception details. We then return None to indicate that there was an error during the execution of the function.