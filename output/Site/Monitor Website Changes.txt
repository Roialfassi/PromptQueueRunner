This problem requires knowledge of web scraping, mutation observers and some JavaScript frameworks/libraries (like jQuery). Here is a simple solution using NodeJS with Cheerio for parsing HTML and MutationObserver for watching changes on the parsed HTML.

First, install necessary packages:
```bash
npm i -S cheerio mozilla-overrides
```

Here's the function to monitor website layout/order changes:

```javascript
const { JSDOM } = require('jsdom');
const $ = require('cheerio').default;
const { MutationObserver } = require("mutation-observer");

async function monitorSiteChanges(url, selector) {

    // Load the target URL
    const dom = new JSDOM(`${url}`));
    let parsedHTML = $(dom.window.document).find(selector);

    // Set up Mutation Observer
    const observer = new MutationObserver((mutationsList) => {
        for (let mutation of mutationsList) {
            if (mutation.type === "childList") {
                parsedHTML = $(dom.window.document).find(selector);
                console.log("Changes detected in website layout/order.");
                console.log("New parsed HTML: ", parsedHTML.html());
            }
        }
    }));

    observer.observe(dom.window.document.body, { childList: true, subtree: true }));

}
```

You can use this function like this:
```javascript
monitorSiteChanges('https://example-website.com', '.example-class');
```
This will monitor the website at 'https://example-website.com' for any changes in the HTML element with class `.example-class`.

Remember, you need to replace https://example-website.com and .example-class with your real URL and selector respectively.

Also, always make sure that web scraping is allowed by the website's terms of service before implementing this function.