In this response, we will discuss about Binary Search Trees (BSTs) along with some key operations and their time complexities in Big O notation.

**Properties:**
1. **Ordering**: BSTs maintain the property of a binary tree where for any node in the tree, elements to its left are less than it and elements to right are greater.
2. **Root Node**: The root (or maximum) element is always present in every BST.
3. **Leaf Nodes**: A leaf node (also called a null or empty node), is a node that doesn’t have either a left child or a right child.
4. **Minimum and Maximum Values**: Every BST has a minimum value which is the smallest element of all elements in the tree, and a maximum value which is the largest element of all elements in the tree. 

**Operations:**
1. **Insertion**: Inserting an element into a BST requires that you start at the root and compare your value to be inserted with the current node's value. If the new value is less than the current node's value, move to the left child; if it's more significant, move to the right child. This process continues until we reach a leaf node (NULL node) where the new element can be inserted.

2. **Deletion**: Deleting an element from a BST requires you to start at the root and compare your value to be deleted with the current node's value. If the value of the node you're trying to delete is less than the current node's value, move to the left child; if it's more significant, move to the right child. This process continues until we either find a leaf node (NULL node) where the element to be deleted resides, or we have traversed the entire tree and found that there is no such element in the BST.

3. **Search**: Searching for an element in a BST requires you to start at the root and compare your value with the current node's value. If the value of the element you're searching for is less than the current node's value, move to the left child; if it's more significant, move to the right child. This process continues until we either find a leaf node (NULL node) where the element resides, or we have traversed the entire tree and found that there is no such element in the BST.

**Complexity:**

The time complexity of operations in a Binary Search Tree (BST) are:

1. **Insertion**: O(log n), as on average, about half of the nodes you’d need to visit are located directly beneath or above your target node. 

2. **Deletion**: O(log n).

3. **Search**: O(log n).

These time complexities make BSTs a very efficient data structure for handling operations like insertion, deletion, and search in a sorted manner.