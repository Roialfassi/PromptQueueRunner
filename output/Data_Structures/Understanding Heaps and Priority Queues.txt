Heap is an advanced data structure that allows efficient execution of certain important tasks such as scheduling algorithms for operating systems or event handling in application software.

The main characteristics of a heap are:

1. **Complete Binary Tree**: A binary tree where every node is either a leaf node or a non-leaf node (having at least one child) whose children have a maximum possible value according to the type of heap (Min Heap, Max Heap)). 

2. **Heap Operations**: The most common operations on heaps are as follows:

    a. **Insertion**: Inserting an element into a heap involves two steps:

        i. Add the new element at the end of the binary tree (usually leftmost node).
       
        ii. Perform "bubble-up" operation to restore the heap property (the newly inserted element should be in its correct position within the binary tree))).

    b. **Deletion**: Deleting an element from a heap involves two steps:

        i. Replace the root of the binary tree (usually leftmost node) with the last element of the binary tree).
       
        ii. Perform "bubble-down" operation to restore the heap property (the root of the binary tree should be in its correct position within the binary tree))).

Heaps are used to implement priority queues because:

1. **Stability**: In a min heap, once an element has been inserted into the heap, all other elements in the heap have a value less than or equal to that of the inserted element (as it should be in a min heap)). This property is called "stability".

2. **Efficiency**: The heap data structure allows efficient execution of priority queue operations with time complexities of O(log n) for insertion and deletion.

To illustrate heaps using an example, let's consider a priority queue implemented using a min heap:

```
Priority Queue (Min Heap)):

        15
       /  \
     10    20
   /  \    /  \
  5    12  25    35
```

In this example, the elements are inserted into the priority queue in ascending order. This results in a binary tree where each node has a value less than or equal to its parent node (as it should be in a min heap)). The root of the binary tree is always the minimum element in the priority queue.

The heap operations for this example are as follows:

1. **Insertion**: Inserting an element into the priority queue involves two steps:

    a. Add the new element at the end of the binary tree (usually leftmost node)).

    b. Perform "bubble-up" operation to restore the heap property (the newly inserted element should be in its correct position within the binary tree)).

2. **Deletion**: Deleting an element from the priority queue involves two steps:

    a. Replace the root of the binary tree (usually leftmost node)) with the last element of the binary tree).

    b. Perform "bubble-down" operation to restore the heap property (the root of the binary tree should be in its correct position within the binary tree)).

In this example, we can see that the priority queue maintains the minimum elements at the root of the binary tree. The "insertion" and "deletion" operations for a min heap involve adding new elements to the end of the binary tree (usually leftmost node)) and replacing the root with the last element in the binary tree, respectively. These operations ensure that the priority queue maintains the minimum elements at the root of the binary tree, which is always the minimum element in the priority queue.